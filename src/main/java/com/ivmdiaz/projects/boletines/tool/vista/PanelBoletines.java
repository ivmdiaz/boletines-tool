/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.ivmdiaz.projects.boletines.tool.vista;

import com.ivmdiaz.projects.boletines.tool.Principal;
import com.ivmdiaz.projects.boletines.tool.modelo.Estudiante;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.multipdf.PDFMergerUtility;
import org.apache.pdfbox.multipdf.Splitter;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.encryption.AccessPermission;
import org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy;
import org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy;
import org.apache.pdfbox.text.PDFTextStripper;


/**
 *
 * @author idiaz@cx.local
 */
public class PanelBoletines extends javax.swing.JPanel {

    private File archivoBoletines;
    private Map<Estudiante, PDDocument> boletinesList = new HashMap<>();

    /**
     * Creates new form Directorio
     */
    public PanelBoletines() {
        initComponents();
        this.actualizarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableBoletines = new javax.swing.JTable();
        btnCargarArchivo = new javax.swing.JButton();
        jCheckBoxCifrado = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1200, 600));

        title.setFont(new java.awt.Font("Liberation Sans", 1, 24)); // NOI18N
        title.setText("BOLETINES");

        tableBoletines.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "Niup", "Correo personal", "Correo alternativo", "Teléfono"
            }
        ));
        jScrollPane1.setViewportView(tableBoletines);

        btnCargarArchivo.setText("Cargar archivo");
        btnCargarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarArchivoActionPerformed(evt);
            }
        });

        jCheckBoxCifrado.setText("Proteger con contraseña");
        jCheckBoxCifrado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxCifradoActionPerformed(evt);
            }
        });

        jButton1.setText("Descargar boletines ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(title)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnCargarArchivo)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1160, Short.MAX_VALUE))
                        .addGap(22, 22, 22))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jCheckBoxCifrado))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(title)
                .addGap(47, 47, 47)
                .addComponent(btnCargarArchivo)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxCifrado)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap(69, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCargarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarArchivoActionPerformed
        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("*.pdf", new String[]{"pdf"}));
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        final int result = fileChooser.showOpenDialog(this);
        if (result == 0) {
            try {
                final File selectedFile = fileChooser.getSelectedFile();
                System.out.println("Selected file: " + selectedFile.getAbsolutePath());
                this.archivoBoletines = selectedFile;
                this.procesarArchivoPdf();
            } catch (IOException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error no se pudo cargar el archivo", "Error", 0);
            }
        }
    }//GEN-LAST:event_btnCargarArchivoActionPerformed

    private void jCheckBoxCifradoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxCifradoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxCifradoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        try {
            if (boletinesList != null && !boletinesList.isEmpty()) {
                final JFileChooser f = new JFileChooser();
                f.setFileSelectionMode(1);
                f.showSaveDialog(null);
                final File carpeta = new File(f.getSelectedFile().getAbsolutePath() + "/" + 
                        archivoBoletines.getName().replaceAll(".pdf", ""));
                carpeta.mkdirs();
                System.out.println(carpeta);
                for (final Map.Entry<Estudiante, PDDocument> entry : boletinesList.entrySet()) {
                    final Estudiante estudiante = entry.getKey();
                    final PDDocument pdf = entry.getValue();
                    final AccessPermission ap = new AccessPermission();
                    ap.setCanPrint(false);
                    ap.setCanExtractContent(false);
                    final StandardProtectionPolicy spp = new StandardProtectionPolicy(estudiante.getNiup(),
                            estudiante.getNiup(), ap);
                    if (this.jCheckBoxCifrado.isSelected()) {
                        spp.setEncryptionKeyLength(128);
                        spp.setPermissions(ap);
                        pdf.protect((ProtectionPolicy) spp);
                    }
                    final File pdfFile = new File(carpeta.getAbsolutePath() + "/" + estudiante.toString() + ".pdf");
                    pdf.save(pdfFile);
                    pdf.close();
                }
                JOptionPane.showMessageDialog(this, "Se han dividido los boletines correctamente: [" + boletinesList.size() + "]", "Boletines partidos", 1);
            } else {
                JOptionPane.showMessageDialog(this, "Error. Debe cargar un archivo PDF con boletines", "Error", 0);
            }
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error no se pudo generar los boletines", "Error", 0);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public void procesarArchivoPdf() throws FileNotFoundException, IOException {

       if (this.archivoBoletines != null && this.archivoBoletines.exists()) {
            this.boletinesList = new HashMap<>();
            final PDDocument document = Loader.loadPDF(this.archivoBoletines);
            final Splitter splitter = new Splitter();
            final List<PDDocument> pages = (List<PDDocument>) splitter.split(document);
            final Iterator<PDDocument> iterator = pages.listIterator();
            final Map<Estudiante, List<PDDocument>> mapPaginas = new HashMap<>();

            while (iterator.hasNext()) {
                final PDDocument paginaPdf = iterator.next();
                this.procesarPaginaPdf(paginaPdf, mapPaginas);
            }

            this.construirBoletines(mapPaginas);
            this.actualizarTabla();

        }
    }
    
    public void procesarPaginaPdf(PDDocument paginaPdf,
            Map<Estudiante, List<PDDocument>> mapPaginas) throws IOException {

        final PDFTextStripper stripper = new PDFTextStripper();
        final String text = stripper.getText(paginaPdf);
        final String[] textoDividido = text.split("\\r?\\n");
        String linea_anterior = "";

        String flagIdentificador = null;
        String flagNombre = null;

        if (!paginaPdf.isEncrypted()) {
            for (int i = 0; i < textoDividido.length; ++i) {
                final String linea = textoDividido[i];
                if (i > 0) {
                    linea_anterior = textoDividido[i - 1];
                }
                if (linea.contains("NUIP.") || linea.contains("NIP.") || linea.contains("CE.") || linea.contains("SED.")) {
                    if (flagIdentificador == null) {
                        flagIdentificador = this.obtenerIdentificacion(linea);
                    } else if (!flagIdentificador.equals(this.obtenerIdentificacion(linea))) {
                        flagIdentificador = this.obtenerIdentificacion(linea);
                    }
                } else if (linea_anterior.trim().startsWith("P\u00e1gina")) {
                    flagNombre = this.obtenerNombre(linea);
                }
            }
            this.putEstudianteInMapEstudiantes(mapPaginas, flagIdentificador, flagNombre, paginaPdf);
        }
    }

    public String obtenerIdentificacion(String linea) {
        String niup = linea.trim().replaceAll("\\D+", "");
        return niup;
    }

    public String obtenerNombre(String linea) {
        String nombre = linea.trim();
        return nombre;
    }

    public void putEstudianteInMapEstudiantes(final Map<Estudiante, List<PDDocument>> map, final String niup, final String nombre, final PDDocument value) {
        final boolean encontro = false;
        for (final Map.Entry<Estudiante, List<PDDocument>> entry : map.entrySet()) {
            final Estudiante key = entry.getKey();
            if (key.getNiup() != null && key.getNiup().equals(niup)) {
                entry.getValue().add(value);
                return;
            }
        }
        if (!encontro) {
            final List<PDDocument> list = new ArrayList<>();
            list.add(value);
            final Estudiante estudiante = new Estudiante(niup, nombre);
            map.put(estudiante, list);
        }
    }

    public void construirBoletines(Map<Estudiante, List<PDDocument>> mapPaginas) throws IOException {

        for (final Map.Entry<Estudiante, List<PDDocument>> entry : mapPaginas.entrySet()) {
            final Estudiante estudiante = entry.getKey();
            final List<PDDocument> paginas = entry.getValue();
            PDDocument destino = null;
            for (int i = 0; i < paginas.size(); ++i) {
                if (i == 0) {
                    destino = paginas.get(i);
                } else {
                    final PDFMergerUtility PDFmerger = new PDFMergerUtility();
                    PDFmerger.appendDocument(destino, (PDDocument) paginas.get(i));
                }
            }
            this.boletinesList.put(estudiante, destino);
        }
    }

    private void actualizarTabla() {

        final DefaultTableModel tableModel = new DefaultTableModel();
        this.tableBoletines = new JTable(tableModel);
        this.tableBoletines.setEnabled(false);

        tableModel.addColumn("Niup");
        tableModel.addColumn("Nombre");

         for (final Map.Entry<Estudiante, PDDocument> entry : this.boletinesList.entrySet()) {
            final Estudiante key = entry.getKey();
            
            tableModel.insertRow(tableModel.getRowCount(), new Object[]{
                key.getNiup(),
                key.getNombre()
            });
        }

        jScrollPane1.setViewportView(tableBoletines);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCargarArchivo;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBoxCifrado;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableBoletines;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
